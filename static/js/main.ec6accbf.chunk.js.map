{"version":3,"sources":["Crypto.js","App.js","reportWebVitals.js","index.js"],"names":["Crypto","coinname","image","symbol","price","volume","priceChange","marketcap","className","src","alt","toLocaleString","toFixed","App","useState","coins","setCoins","search","setSearch","useEffect","axios","get","then","res","data","catch","error","console","log","filteredCoins","filter","coin","name","toLowerCase","includes","type","placeholder","onChange","e","target","value","map","market_cap","current_price","price_change_percentage_24h","total_volume","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA0BeA,EAtBA,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,SAASC,EAAqD,EAArDA,MAAMC,EAA+C,EAA/CA,OAAOC,EAAwC,EAAxCA,MAAMC,EAAkC,EAAlCA,OAAOC,EAA2B,EAA3BA,YAAYC,EAAe,EAAfA,UAC5D,OACI,8BACI,qBAAKC,UAAU,iBAAf,SACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,OAAf,UACI,qBAAKC,IAAKP,EAAOQ,IAAI,WACrB,6BAAKT,IACL,mBAAGO,UAAU,cAAb,SAA4BL,OAEhC,sBAAKK,UAAU,YAAf,UACI,oBAAGA,UAAU,aAAb,gBAA8BJ,EAAMO,oBACpC,oBAAGH,UAAU,cAAb,gBAA+BH,EAAOM,oBACtCL,EAAY,EAAG,oBAAGE,UAAU,mBAAb,UAAiCF,EAAYM,QAAQ,GAArD,OAAgE,oBAAGJ,UAAU,qBAAb,UAAmCF,EAAYM,QAAQ,GAAvD,OAChF,oBAAGJ,UAAU,iBAAb,oBAAsCD,EAAUI,+BCgCxDE,MA1Cf,WACE,MAAsBC,mBAAS,IAA/B,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAMG,EAAN,KAAaC,EAAb,KAEAC,qBAAU,WACRC,IAAMC,IAAI,4HACTC,MAAK,SAAAC,GACJP,EAASO,EAAIC,SAGdC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEd,IAEF,IAIMG,EAAcd,EAAMe,QAAO,SAAAC,GAAI,OACnCA,EAAKC,KAAKC,cAAcC,SAASjB,EAAOgB,kBAG1C,OACE,sBAAKzB,UAAU,WAAf,UACE,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,YAAd,oBACA,+BACE,uBAAO2B,KAAK,OAAOC,YAAY,SAAS5B,UAAU,aAAa6B,SAbtD,SAAAC,GACjBpB,EAAUoB,EAAEC,OAAOC,eAehBX,EAAcY,KAAI,SAAAV,GACjB,OACE,cAAC,EAAD,CACA9B,SAAU8B,EAAKC,KAAM9B,MAAO6B,EAAK7B,MAAOC,OAAQ4B,EAAK5B,OAAQI,UAAWwB,EAAKW,WAAYtC,MAAO2B,EAAKY,cAAerC,YAAayB,EAAKa,4BAA6BvC,OAAQ0B,EAAKc,cADnKd,EAAKe,WC7BbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ec6accbf.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Crypto.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Crypto = ({coinname,image,symbol,price,volume,priceChange,marketcap}) => {\r\n    return (\r\n        <div>\r\n            <div className='coin-container'>\r\n                <div className=\"coin-row\">\r\n                    <div className=\"coin\">\r\n                        <img src={image} alt=\"crypto\"></img>\r\n                        <h1>{coinname}</h1>\r\n                        <p className=\"coin-symbol\">{symbol}</p>\r\n                    </div>\r\n                    <div className=\"coin-data\">\r\n                        <p className=\"coin-price\">Rs.{price.toLocaleString()}</p>\r\n                        <p className=\"coin-volume\">Rs.{volume.toLocaleString()}</p>\r\n                       {priceChange<0?(<p className=\"coin-percent red\">{priceChange.toFixed(2)}%</p>):(<p className=\"coin-percent green\">{priceChange.toFixed(2)}%</p>)} \r\n                       <p className=\"coin-marketcap\">MktCap:{marketcap.toLocaleString()}</p>\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crypto\r\n","import React,{useState,useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Crypto from './Crypto';\n\n\n// https://api.coingecko.com/api/v3/coins/markets?vs_currency=inr&order=market_cap_desc&per_page=100&page=1&sparkline=false\n\nfunction App() {\n  const[coins,setCoins]=useState([])\n  const[search,setSearch]=useState('')\n\n  useEffect(()=>{\n    axios.get(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=inr&order=market_cap_desc&per_page=100&page=1&sparkline=false\")\n    .then(res=>{\n      setCoins(res.data);\n      // console.log(res.data);\n    })\n    .catch(error=>{\n      console.log(error);\n    });\n  },[]);\n\n  const handleChange=e=>{\n    setSearch(e.target.value);\n  };\n\n  const filteredCoins=coins.filter(coin=>\n    coin.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  return (\n    <div className=\"coin-app\">\n      <div className=\"coin-search\">\n          <h1 className=\"coin-text\">Search</h1>\n          <form>\n            <input type=\"text\" placeholder=\"search\" className=\"coin-input\" onChange={handleChange}></input>\n          </form>\n      </div>\n      {filteredCoins.map(coin=>{\n        return(\n          <Crypto key={coin.id} \n          coinname={coin.name} image={coin.image} symbol={coin.symbol} marketcap={coin.market_cap} price={coin.current_price} priceChange={coin.price_change_percentage_24h} volume={coin.total_volume}/>\n        )\n      })}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}